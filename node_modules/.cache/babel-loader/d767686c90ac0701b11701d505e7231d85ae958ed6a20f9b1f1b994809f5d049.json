{"ast":null,"code":"var _jsxFileName = \"/Users/matt/info655-assignment2/src/Playlist.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport './App.css';\nimport shuffleButton from '/Users/matt/info655-assignment2/src/shuffleButton.png';\nimport backButton from '/Users/matt/info655-assignment2/src/backButton.png';\nimport playButton from '/Users/matt/info655-assignment2/src/playButton.png';\nimport forwardButton from '/Users/matt/info655-assignment2/src/nextButton.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Playlist = () => {\n  _s();\n  const [playlist, setPlaylist] = useState([]);\n  const getSongs = () => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"http://localhost:3001/tracks\");\n    xhr.send();\n    xhr.responseType = \"json\";\n    xhr.onload = () => {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        const data = xhr.response;\n        setPlaylist(data);\n      } else {\n        console.log(`Error: ${xhr.status}`);\n      }\n    };\n  };\n  useEffect(getSongs, []);\n  const shufflePlaylist = () => {\n    let shuffledPlaylist = [...playlist];\n    shuffledPlaylist.sort(() => Math.random() - 0.5);\n    setPlaylist(shuffledPlaylist);\n  };\n  const [isPlaying, setIsPlaying] = useState(false);\n  const playPauseSong = () => {\n    if (isPlaying) {\n      setNowPlaying('Paused');\n      setIsPlaying(false);\n    } else {\n      const playingTitle = 'title' in playlist[nowPlayingIndex] ? playlist[nowPlayingIndex].title : playlist[nowPlayingIndex].episodeTitle;\n      setNowPlaying(`Playing: ${playingTitle}`);\n      setIsPlaying(true);\n    }\n  };\n  const handleDoubleClick = (title, episodeTitle, index) => {\n    setNowPlayingIndex(index);\n    if (title) {\n      setNowPlaying(`Now Playing: ${title}`);\n    } else if (episodeTitle) {\n      setNowPlaying(`Now Playing: ${episodeTitle}`);\n    }\n  };\n  const nextSong = () => {\n    let nextIndex = nowPlayingIndex + 1;\n    if (nextIndex >= playlist.length) {\n      nextIndex = 0;\n    }\n    setNowPlayingIndex(nextIndex);\n    const nextTrack = playlist[nextIndex];\n    const playingTitle = 'title' in nextTrack ? nextTrack.title : nextTrack.episodeTitle;\n    setNowPlaying(`Now Playing: ${playingTitle}`);\n  };\n  const backSong = () => {\n    let prevIndex = nowPlayingIndex - 1;\n    if (prevIndex < 0) {\n      prevIndex = playlist.length - 1;\n    }\n    setNowPlayingIndex(prevIndex);\n    const previousTrack = playlist[prevIndex];\n    const playingTitle = 'title' in previousTrack ? previousTrack.title : previousTrack.episodeTitle;\n    setNowPlaying(`Now Playing: ${playingTitle}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"toolbar\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: shufflePlaylist,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"shuffle\",\n          src: shuffleButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backSong,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"previous\",\n          src: backButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playPauseSong,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"play\",\n          src: playButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextSong,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"next\",\n          src: forwardButton\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: nowPlaying\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }, this), playlist.map((item, index) => {\n      if ('artist' in item) {\n        return /*#__PURE__*/_jsxDEV(Song, {\n          ...item,\n          onDoubleClick: () => handleDoubleClick(item.title, null, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Podcast, {\n          ...item,\n          onDoubleClick: () => handleDoubleClick(null, item.episodeTitle, index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 16\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Playlist, \"rREo2ZlGyXcQ7D6UU3h08RgzCzk=\");\n_c = Playlist;\nexport default Playlist;\nvar _c;\n$RefreshReg$(_c, \"Playlist\");","map":{"version":3,"names":["React","useEffect","useState","Song","Podcast","shuffleButton","backButton","playButton","forwardButton","jsxDEV","_jsxDEV","Playlist","_s","playlist","setPlaylist","getSongs","xhr","XMLHttpRequest","open","send","responseType","onload","readyState","status","data","response","console","log","shufflePlaylist","shuffledPlaylist","sort","Math","random","isPlaying","setIsPlaying","playPauseSong","setNowPlaying","playingTitle","nowPlayingIndex","title","episodeTitle","handleDoubleClick","index","setNowPlayingIndex","nextSong","nextIndex","length","nextTrack","backSong","prevIndex","previousTrack","children","className","onClick","src","fileName","_jsxFileName","lineNumber","columnNumber","nowPlaying","map","item","onDoubleClick","_c","$RefreshReg$"],"sources":["/Users/matt/info655-assignment2/src/Playlist.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Song from './Song';\nimport Podcast from './Podcast';\nimport './App.css';\nimport shuffleButton from '/Users/matt/info655-assignment2/src/shuffleButton.png';\nimport backButton from '/Users/matt/info655-assignment2/src/backButton.png';\nimport playButton from '/Users/matt/info655-assignment2/src/playButton.png';\nimport forwardButton from '/Users/matt/info655-assignment2/src/nextButton.png';\n\nconst Playlist = () => {\n  \n  const [playlist, setPlaylist] = useState([]);\n\n  const getSongs = () => {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", \"http://localhost:3001/tracks\");\n    xhr.send();\n    xhr.responseType = \"json\";\n    xhr.onload = () => {\n      if (xhr.readyState == 4 && xhr.status == 200) {\n        const data = xhr.response;\n        setPlaylist(data);\n      } else {\n        console.log(`Error: ${xhr.status}`);\n      }\n    };\n  };\n\n  useEffect (getSongs, []);\n\n  const shufflePlaylist = () => {\n    let shuffledPlaylist = [...playlist];\n    shuffledPlaylist.sort(() => Math.random() - 0.5);\n  setPlaylist(shuffledPlaylist);\n  };\n\n\n  const [isPlaying, setIsPlaying] = useState(false);\n\n  const playPauseSong = () => {\n    if (isPlaying) {\n      setNowPlaying('Paused');\n      setIsPlaying(false);\n    } else {\n      const playingTitle = 'title' in playlist[nowPlayingIndex] ? playlist[nowPlayingIndex].title : playlist[nowPlayingIndex].episodeTitle;\n      setNowPlaying(`Playing: ${playingTitle}`);\n      setIsPlaying(true);\n    }\n  };\n\nconst handleDoubleClick = (title, episodeTitle, index) => {\n  setNowPlayingIndex(index);\n  if (title) {\n    setNowPlaying(`Now Playing: ${title}`);\n  } else if (episodeTitle) {\n    setNowPlaying(`Now Playing: ${episodeTitle}`);\n  }\n};\n\nconst nextSong = () => {\n  let nextIndex = nowPlayingIndex + 1;\n  if (nextIndex >= playlist.length) {\n    nextIndex = 0;\n  }\n  setNowPlayingIndex(nextIndex);\n  const nextTrack = playlist[nextIndex];\n  const playingTitle = 'title' in nextTrack ? nextTrack.title : nextTrack.episodeTitle;\n  setNowPlaying(`Now Playing: ${playingTitle}`);\n};\n\nconst backSong = () => {\n  let prevIndex = nowPlayingIndex - 1;\n  if (prevIndex < 0) {\n    prevIndex = playlist.length - 1;\n  }\n  setNowPlayingIndex(prevIndex);\n  const previousTrack = playlist[prevIndex];\n  const playingTitle = 'title' in previousTrack ? previousTrack.title : previousTrack.episodeTitle;\n  setNowPlaying(`Now Playing: ${playingTitle}`);\n};\n  \n   return (\n    <div>\n    <div className=\"toolbar\">\n      <button onClick={shufflePlaylist}>\n        <img className=\"shuffle\" src={shuffleButton} />\n      </button>\n\n      <button onClick={backSong}>\n        <img className=\"previous\" src={backButton} />\n      </button>\n\n      <button onClick={playPauseSong}>\n        <img className=\"play\" src={playButton} />\n      </button>\n\n      <button onClick={nextSong}>\n        <img className=\"next\" src={forwardButton} />\n      </button>\n    </div>\n\n    <div className=\"status\">\n      {nowPlaying}\n    </div>\n  \n    {playlist.map((item, index) => {\n      if ('artist' in item) {\n        return <Song key={index} {...item} onDoubleClick={() => handleDoubleClick(item.title, null, index)} />;\n      } else {\n        return <Podcast key={index} {...item} onDoubleClick={() => handleDoubleClick(null, item.episodeTitle, index)} />;\n      }\n    })}\n\n      </div>\n    );\n  };\n\nexport default Playlist;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}